

When waiting, a machine still has to be pointed at
or rather it needs to be summonable
it must be registered with its waking time
then on each invocation, on each tick of the overall app
we can know which other machines are due to be run

so on every wait, the machine id must be added to a data structure
stored presumably itself via the usual mechanism
this is an upstream dependency for us:

a growable heap of (due,id) tuples

each page of the heap will be one storable machine

a most basic version would have a single page and limit

#+begin_src js
[[10132123,'baa1'],[10132224,'baa2']]
#+end_src

a registered waitee would be always awaiting a call from the mechanism
so it would be /attentive/ by default
in return for its reliable registration elsewhere, it would lapse into
this receptive, vegatative state

a request to wait, then, isn't just the return of a phase, but an interaction
with the scheduler coupled with a vegetation

what the scheduler does is its own business
what we care about is that it receives our id happily
with this we can lapse

the intention to achieve this blissful relaxation and deference
is furthered by a special phase: perhaps $wait lapsing into $waiting

#+begin_src js
  ['$scheduling', [[100000,'m1']]]
    ['$wait', [1041651, ['doSummat']]] //convenes scheduler

  ['$scheduling', [[100000,'m1'],[1041651,'m2']]]
    ['$waiting', ['doSummat']] //attends to incoming pings

  ['doSummat']
#+end_src

scheduler has a single phase here:
it just attends to attempts to enqueue
but also convenes due targets when they're due

so this is two responsibilities
it has two things to do: attend and await the actual timer
the timer could itself be a separate, very simple machine
a machine that will convene the attending scheduler
in series with enqueue attempts

but would the timer be unique to the scheduler then? I think it would
$schedule would talk to $timer
I can imagine the two halves sharing an apartment

$schedule would receive calls, either from the timer or from clients
when receiving from the timer, then it is its role to dispatch
but given the possibility of delays on the dispatch
this would close it to further timer events
on the receipt of a timer, it should then reprogram the timer
while also handing over, somehow, the dispatch to another

this is all zooming in on the apartment idea from yonks back
in which multiple machines can share the same state
by allowing immediate read-only access of other apartments
though such watching of others can already be done at the machine level:

a dispatcher could watch the progress of the scheduler,
and as soon as any items became visibly due
it could start sending them out
the problem here is with lossiness: no guarantee of intermediate states being seen
monotonic values only ever going in one direction required

with the apartments, each one can commit to its own part, and others
can see it, but others can't change the original data
they would need to communicate with its owner
it's the same case with machines: the same systems are possible at a bigger granularity

but - no shared state! only agreed communications between parties
so to hand over an item to a potential receiver, the sender would have to delegate to another via comms

how else can we do anything concurrently? we can await concurrently, and we can convene concurrently
but we can't send and receive concurrently
we can receive concurrently, but we effectively lock all clients until we service their requests
given an incoming message we should be able to stow it away in one apartment

it's almost like we need an interrupt: given an incoming meeting, our current attempt at joining another meeting should be gazumpable
though even better would be being able to do both simultaneously
but if each part has such independence, how can they coordinate, if only one communication can be happening at a time?

two-way communication is actually possible between things monitoring each other (via either watches or the polling of neighbouring parts)
as long as one can observe each other
given two apartments, the receiver always adds to its queue, unless it sees that its downstream processer friend has caught up,
in which case it can cull messages that it knows are already handled
the downside here is that it can only collect its garbage when it's free of waiting
waiting itself can have a timeout? or maybe the interrupt to clean up can itself be queued as a message

---------

one issue with this:
when restarting the system, we'd naturally revive the scheduler, and then the scheduler would revive its clients

but clients aren't always in the scheduler queue: sometimes they're doing normal things; and if they are, we won't know
to revive them unless we have them registered elsewhere
so the function of the scheduler as a kind of register is misleading: it can't be its responsibility in any way

does the scheduler need to be persistent, then?
couldn't it just be populated as clients are revived?

if a client is in the $wait state, when revived it could rehook itself into the transient timer of the runtime
and in the $wait state, it just listens for messages that might tell it to revive

$wait is special then: when the runtime sees it, the runtime enqueues it

no other state is special like this

modelling this system within the states themselves is evidently possible and even /nice/
and would simplify the runtime at the cost of having to pursue its design in other areas

the choice: arbitrary timer subsystem or some fancy-pants investigation. hmm

---------

The registry itself is interesting: it will get bigger and bigger as more machines are made

Not all machines need to register with it, but if they don't, they'll always be at risk of disappearing
ie if we need a machine to return to us at some point, it must be registered
maybe not with the base registry, but somewhere
in fact components could include their own localised registries
there is then no need for a central registry in which everything is registered in a massive list

but we do need roots, which we will manually summon

---------

if machines keep others alive, it can only be via the meeting mechanism
and it can only be by convene or watch, as these are the only targeting forms
watching, then keeps a machine performing

and if the watch is forgotten at any time, then the clients can be forgotten unless they are grounded
which seems like it would harm the reliability of the system
outages should not grossly affect the output of the whole

------------

We'll have our chosen roots, which will need to watch their sub-machines
so it's not just about keeping refs, it's also about watching those refs

------------

Keeping it simple: we can lean on there being a registry of machines
and watching being the only way to keep another alive

so - a special behaviour in the dispatcher is needed:
but this just means we need $wait to be pre-populated, just as $boot is now
wait just hooks in a delay for completion, returning the follow-on state
quite simple!

testing this needs a programmable clock
when time is shoved forwards, then the schedule progresses to that point
like, in tests we want a fake timer



---

the mechanism of watching, though... when one machine has created another
it then takes on responsibility for it
instead of booting directly, maybe a communication is made to a registrar machine instead

-------------------


So, meetings around a rendevous point:
the problem with invite/attend is that there's a clear priority of initiative (isn't this inescable?)
also that the inviter must know the name of the attendee, whereas the attendee has no control at all

it's like there's an outer layer of equality, and then within this there's an inescable ordering of communication
(one party must talk before the other, and each is always free to either command or yield)
the first convener could in fact, when the attendee is reached, ask for the command of the other
it would /grovel/ - it would go to the source of commands and /ask/
 
but, even when so ingratiating, it knows the id of the other

--------------------

starting from a known thorny clump:
an actual meeting of peers to share things
each one has to both convene and attend

each one needs to know the other's name
and each one has to attend and convene simultaneously
the rendesvous point solves this
though on each change at the rendesvous point
each needs the chance to meet or not meet

but if one always says 'meet' and the other always says 'no'
where does that leave us? stuck

the rendesvous establishes a pool
and then the parties need to group from there
voting? on each change, each has a voice in whether to meet or not

seems like a constraint problem: each party advertises its demands
and if we can meet them, we all meet

a simple constraint would be a minimum number of parties (surely in almost all cases this would be 2)
or maybe a selection of tags could be offered?
different protocols can be imagined here

and the simplest and most capable (though not simplifying) of all would be pure laziness:
each party gets to say true/false to... /what?/
it couldn't be to the group as a whole: then one single bad apple would get us stuck
even though there could be a happy meeting of others all this time

with perfect fairness, each would propose its set of attendees
and would then have a veto; all would be churned through until we got a maximal group size
(though what about the residue - this really is a constraint-solving problem)

or, each would state its demands of others, though still we get into the same problem
of establishing a quorum, and of most efficient series of meetings

----------------------

a rendesvous could be an attentive machine, always receiving others
but it would have to be able to keep on receiving new machines, just as it keeps others on

if stowed into state, then it reliably takes on responsibility for calling the the other machines back
attendees themselves would go into a holding state, waiting to be called back
(though they'd need to be selectivey-attentive, ie not accepting meetings from others)

though it's also nice to rely on reliable retries here
where the meeting will reliably always happen in some form
as the machines will always demand it again

for this, if done by machine, a named machine would need to have a way of receiving multiple attendees
and not binding their atoms until the actual meeting was convened (given some constraints would have to be met)

or, it would be done by the runtime
(though with the same atom semantics - can only bind on accepted meeting)

-----------------------

if it were done by the runtime...
we'd still need a quorum constraint system (unless we tied it down to 2 - nice and simple, though disappointing)

the point of having larger meetings was to enable group decisions...
and if we're going to use this, it would fit with using states also (which should be cheap...)

and so a rendesvous would accumulate attendees
and each attendee would go into its frozen state (or at least a flow in which they promise to be attentive again)
and they can promise this by being put to sleep in a state in which they're /selectively attentive/
but this could also be done by receiving the first message of the meeting, and expecting a special code

and attendees, when accepted, would be put in a holding pattern
with the promise they'll be available when needed

the rendesvous machine would now be on ice: the only source of life from now on
would be new machines wanting to meet: they'd kick the entire mechanism into action again

but even with this, how would it work?

a rendesvous machine would attend, and on each new peer it would stash it in its list of ids
then check if it could do anything, this would be by checking its demands
if not it would go back to attending, until the next appeared

on the peer side, the meeting would be done by entering a special prelude state and flow
#+begin_src typescript
  spot: ['$rm_receive', []]

  a: ['$r_meet', ['spot', ['cb', ...]]] 

  spot: ['$rm_receive', ['a']]
  a: ['$r_hold', ['spot', ['cb', ...]]]

  b: ['$r_meet', ['spot', ['cb', ...]]] 

  spot: ['$rm_arrange', [['a', 'b'], []]]
  b: ['$r_hold', ['spot', ['cb', ...]]] 

  spot: ['$rm_arrange', [['a'], ['b']]]
  b: ['$r_await', ['spot', ['cb', ...]]]  //!!!!!!! wot

  spot: ['$rm_arrange', [[], ['b', 'a']]]
  a: ['$r_invite', ['spot', ['cb', ...]]]  //!!!!!!! wot

  spot: ['$rm_receive', []]

  //await/invite would be done for us
  //but what of the callback???
  //it would have to attend, one would think, and be given what it's given
  //tho the mediator actually makes one the convener arbitrarily
  //so peers could declare their roles up front
  //enqueued conveners could be in charge of quorums (defaulting to one for simplicity)
  //and callbacks would have to promise to convene or await
  //but these callbacks would also need to have parameters passed to them
  //i'm imagining a second argument of a certain rendesvous-set type
  //comprising id and key, but also arbitrary client-set well-typed state too
  //the rendesvous states don't care about the rest, only the second arg
  //
  //so we'd not be mediating away the master/slave dynamic here
  //but at least we'd have a mediator in place
  //both parties would need to be slaves to the mediator for fairness
  //and the mediator would be barking orders at both
  //which would be he consolidated demands of all parties

  //if the callback always attends, then stuff is much simpler on the peer side
  //the issue is that the mediator is then involved in all subsequent comms
  //but isn't that the point?
  //
  //so the peers would attend, and would be prompted for messages by the mediator
  //the callback functions would receive messages
  //and the mediation would be heavily stateful
  //
  //what processing would occur on the mediator side?
  //not much, each attendee would have the chance to take charge and issue a statement
  //which all submissive attendees would receive

  //but here we're back at the same old scheme of say something/return something
  //the difference is, on the client side, it's all done by one function (which is good actually)
  //all behaviours must be both passive and assertive in potential

  //the stateful mediation:
  //it will accumulate peers one-by-one
  //once we reach quorum, with all peers assumed to be on hold
  //then the meeting begins: it is convened from above
  //and now the mediation happens in real time, without saving

#+end_src

a simple implementation would have a baked-in quorum of 2
as soon as there are two peers in the list,
then one of the two is given the id of the other
and the rest are told to attend, with a secret key to frisk for on receipt

having other quorums is difficult
because if they don't match, then they have to be mediated somehow
a constant quorum sidesteps this
and constants can also be specified in the id...

so the spot calls the peers one-by-one
telling them to be attentive





but then the callback would itself have to be 

-----

as a general approach, putting more into the phases
focuses the runtime on getting the right primitives:
we want to stress the bottom layer as much as possible
with daft demands

----------------------

ERROR SQUISHING

the go flag shouldn't be needed
as soon as the first convener is done,
the lock should be released,
which only at that moment allows the next convener to attach
with its own separate offering

in the world of locks
it's claiming and offering:
conveners try to claim a lock
eventually attendees make offers that match these claims

the old offer must be being left in the lock
and then given to the very next claimant without pause
this is inevitable, in fact
normal behaviour, expectable if unanticipated

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--> *the offer needs to be removed before the claim is removed* <--
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

so currently it will be hapenning in the wrong order
the attendee needs to be removed from the lock before the convener

and what releases? the Mediator surely

as of now, the claiming convener must be releasing first

and the offering attendee releases the handle only after the lock is
released - I wonder why? a distinctive pattern that must have had some rationale

maybe it's the self-reference pattern that threw me off, leading me
to go for the supposedly safe final unlocking (but not safe at all)

---

it's because we can't await inside the chat itself
all we can do is put asynchronous things on the queue
releasing a lock actually seems like it shouldn't be async...
but it is for reasons

so the problem here is that we can't release on the attendee side
on quits, we need to pass the promise to the convener side
so that it can itself release only when the attendee lock has released

this is a dance between attendee and convener:
chat doesn't have to be the limit of the interface
the promise could be exposed on the attendee, visible to the convener

---

It turns out offerers can't release until claimers do
the previous scheme was probably a way to enforce 

-------

So it seems things are ganging up on us here...
the locks insist that the claimant releases first

but this immediately makes the offerer available to the next claimant
which causes the offer, with its commit and state etc,
to be reused: or rather, an attempt is made at reuse
which then gets fobbed off by the go guard

there shouldn't be a go guard - it's only there
because the rest of the mechanism is deficient
and... it turns out it's not a suficient bodge anyway

--------

it should be possible to release an offer,
even when another is using it
or - it should be possible to enqueue such a release
such that it will happen as soon as the other releases it

--------

releasing the offer should stop next queued claims taking effect
what we're saying is, is that offer releases should jump in at the head of the queue
in some kind of heap structure

but then does claim2 languish till another offer is made? yup
nicest thing would be to give it a choice

we have extended claims as well
a claim can cover multiple offers, forming multiple into one

if an offer releases as part of a clump
it can't actually escape until all others agree
but when the changeover happens,
they're left to themselves again

each item then has its queue of applications

again, the release just has to be preferred
priority lane access

what if there are multiple releases?
that's impossible
actually it is possible
nothing ties down the lock to only being released once
if there are two releases

when we release
we're specifically reversing the particular claim
but that claim must have already been applied
all well and good

but if the order changes
actually it doesn't matter
each release relates only to its originating claim
beyond this we're free to rearrange
and all will still make sense

------

so when we release, then we don't queue as normal
we gazump
in fact, do we wait for anything?
we only wait for the conclusion of the current claim

when we release, we're releasing
all the items we currently own
and we own them

for every item, we try to apply our unapply
and maybe it takes a while for the item to get around to executing it

there is no runtime, only parasitic fragments of logic nested
inside a wider structure of interactions from outside

-------

makes sense that claims accumulate, wait in a line
the release also has to wait its turn
but won't wait for another claim to get in

there can only be one release at a time
so there can only be

Entry has a vip App

-------------

a release of an offer is a vip:
it should always nip in before other waiters

how about a release of a claim?

currently a claim, if it releases
won't be able to escape if there's
another claim in the queue

TODO: this needs changing and testing also
claim releases should be vips too *****








