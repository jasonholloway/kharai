
* WatchMap
  we want to view the progress of other machines, without affecting them, a kind of snooping operation
  but `watchRaw` is a bit intrusive like
  so each phase can specify its state mapping
  a synchronous op from state to view - or is it?
  why can't it be async? well, it can return callable callbacks
  the idea is that it can't capture anything private to the source
  in particular the meeting functions are precious

  if a phase registers its projection, it's just reserving its own place
  in the licking into shape of its inner state
  which seems reasonable
  my only fear is of the complicating of the api
  we need to register projections as well as handlers
  though by default nothing needs to be registered

  it is necessary though
  consumers could watch and try to extract
  this would make them blind potentially to intermediate states
  so, like a porpoise, a program could briefly appear in a form
  before doing other things and reappearing in the same form later
  only now slightly transmuted

  
* Saving at end
  when the kill signal fires, we should save
  and moreover, we should fire our own saved signal
  then whatever is orchestrating the closedown will know it can complete at that point
  we basically want an orchestrator that consumes and publishes signals

  but this means an orchestration that is aware of the different elements involved
  as opposed to the 'look after yourselves' approach where a central signal is sent
  and diversely received and processed by opaque listeners at leisure

  all machines should be told, by means of broadcast
  and these machines should shut up shop
  which can be sensed - their logs will complete

  when the machines are complete,
  we can then tell the saver to flush its queue and complete itself
  when this is done, we can quit

  the MachineSpace should then offer a log stream that completes when it itself is closed
  the AtomSpace is then next to be closed
  these distinct actions wouldn't benefit from being driven by an unstructured broadcast

  though, there are also timers that should be closed...
  these timers should be cancelled by the MachineSpace closing
  so, timers belong to the MachineSpace

  we close gates one by one, and flush activity out of each section
  each section is then stateful
  a MachineSpace that is inactive can't take on any more interactions
  testing of this will be specific to the component
  can a MachineSpace be tested independently? let's find out...

* MachineSpace
  the RunSpace just dispatches arbitrary tasks
  and allows meetings between them

  

** TODO test MachineSpace for completion of running

** TODO test AtomSpace for completion of saving
  
  
  

* Distribution
  there's always been this expectation that distribution will be supported by other technologies such as external queues - this would keep the semantics of the system on the surface, avoiding obscuring the real relationships and guarantees offered.

  but it would be pleasant to converse with a machine on a separate partition

  causation should be tracked somehow, so that caused can't save without causer
  and the schema too can't be allowed to go our of sync

  I suppose, though, conversing doesn't involve the normal up-front schema
  it my support ad hoc schemas however, enforced by runtime type checks
  this goes for conversations within a single process too: all peers must come to trust each other
  on every distinct interaction, as state and phases may change completely at any time
  objects with one name don't have one behaviour
  each moment is individual

  so, machines at a distance still need to frisk each other, local or not

  but - causation needs to be tracked somehow
  we have here a distributed transaction
  the only way to do this properly is by consensus by odd quorum

  or - an eventually-consistent system will ensure upstream is saved before downstream
  this is somewhat simpler, but only supports one-way communication
  the one way interaction would be coupled with a one-way confirmation of having persisted the
  thing giving rise to the signal

  but how can the upstream know for certain that the downstream has received its confirmation?
  reliability itself relies on small transactions at the protocol level
  if confirmation was itself one way, using UDP say, then there's the possibility always of the
  downstream hanging as it can't receive the confirmation it needs to continue

  how about, polling for confirmation? each downstream will seek the conrfirmation it needs on a reasonable schedule
  we can rely on the downstream to retry as needed


  

  
  
  

  
  

